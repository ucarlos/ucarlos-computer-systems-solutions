-----------------------------------------------------------------------------------------
In Chapter 3, we will look at listings generated by a disassembler, a program that
converts an executable program file back to a more readable ASCII form. These
files contain many hexadecimal numbers, typically representing values in two’s-
complement form. Being able to recognize these numbers and understand their
significance (for example, whether they are negative or positive) is an important
skill.
For the lines labeled A–I (on the right) in the following listing, convert the
hexadecimal values (in 32-bit two’s-complement form) shown to the right of the
instruction names (sub, mov, and add) into their decimal equivalents:

A) 0x2e0 --> 0010 1110 0000 -> 2 * 16^2 + 14 * 16 + 0 --> 736
B) -0x58 --> ~ (0101 1000) --> 5 * 16 + 8 * 16^0 = 80 + 8 = 88, but since the number is
   negative, it is -88.

C) 0x28 --> 0010 1000 --> 2 * 16 + 8 = 32 + 8 = 40
D) -0x30 --> 0011 0000 --> 3 * 16 + 0 = 48, but since number is negative, it is -48.
E) 0x78 --> 0111 1000 --> 7 * 16 + 8 = 70 + 42 + 8 = 120
F) 0x88 --> 1000 1000 --> 8 * 16 + 8 == 2^3 * 2*4 + 2^3 = 2^7 + 8 = 136
G) 0x1f8 --> 0001 1111 1000 --> 1 * 16^2 + 15* 16 + 8 = 256 + 240 + 8 = 504
H) 0xc0 --> 1100 0000 --> 12 * 16 + 0 = 192
I) -0x48 --> 0100 1000 --> 4 * 16 + 8 = 64 + 8 = 72, but since number is negative, it is
   -72.

-----------------------------------------------------------------------------------------
