Write a C expression that will yield a word consisting of the least significant
byte of x, and the remaining bytes of y. For operands x = 0x89ABCDEF and
y = 0x76543210, this would give 0x765432EF.

((y >> 4) | (unsigned char)(x | (1 << 8)))


Without any casting:
(y >> 4) | ((x & ~x) | ((x << 8 * (sizeof(x) - 1)) >> (8 * (sizeof(x) - 1))))

Where ((x << 8 * (sizeof(x) - 1)) left shifts and removes all bytes (except leastsignificant byte) and then right shifts the same amount to restore its position.
