/* Arguments: p1 at %ebp+8, p2 at %ebp+12, action at %ebp+16
Registers: result in %edx (initialized to -1)
The jump targets:
1   .L17: MODE_E
2   	  movl $17, %edx	--> %edx = 17
3   	 jmp .L19   		-- GO TO DEFAULT:
4   .L13: MODE_A
5   	  movl 8(%ebp), %eax	-- %eax = p1
6   	  movl (%eax), %edx 	-- result = *p1
7   	  movl 12(%ebp), %ecx 	-- %ecx = p2
8   	  movl (%ecx), %eax 	-- %eax = *p2
9   	  movl 8(%ebp), %ecx	-- %ecx = p1;
10  	  movl %eax, (%ecx)	-- *(%ecx) = *p2;
11  	 jmp .L19    		-- GO TO DEFAULT:
12  .L14: MODE_B
13   	  movl 12(%ebp), %edx	-- result = p2
14   	  movl (%edx), %eax	-- %eax = *p2
15   	  movl %eax, %edx	-- result = *p2
16   	  movl 8(%ebp), %ecx	-- %ecx = p1
17   	  addl (%ecx), %edx	-- result = *p2 + *p1
18   	  movl 12(%ebp), %eax	-- %eax = p2
19   	  movl %edx, (%eax)	-- *(%eax) = result
20   	  jmp .L19		-- GO TO DEFAULT:
21 .L15:  MODE_C
22   	  movl 12(%ebp), %edx	-- result = p2
23   	  movl $15, (%edx)	-- *result = 15
24   	  movl 8(%ebp), %ecx	-- %ecx = p1
25   	  movl (%ecx), %edx	-- result = *p1
26   	  jmp .L19		-- GO TO DEFAULT:
27 .L16:  MODE_D
28 	  movl 8(%ebp), %edx	-- result = p1
29 	  movl (%edx), %eax	-- %eax = *result
30 	  movl 12(%ebp), %ecx	-- %ecx = p2
31 	  movl %eax, (%ecx)	-- *p2 = *result
32 	  movl $17, %edx	-- result = 17
33 .L19: default
34 	 movl %edx, %eax  --Set return value -- %eax = result

Figure 3.43 Assembly code for Problem 3.58. This code implements the different
branches of a switch statement.
*/
