Suppose you are given the job of checking that a C compiler generates the proper
code for structure and union access. You write the following structure
declaration:

typedef union{
	struct {
	       short v;
	       short d;
	       int   s;
	} t1;
	struct {
	       int a[2];
	       char *p;
	} t2;
	
} u_type;


You write a series of functions of the form

void get(u_type *up, TYPE *dest){
     *dest = EXPR;
}

with different access expressions EXPR, and with destination data type TYPE set
according to type associated with EXPR. You then examine the code generated when
compiling the functions to see if they match your expectations.

Suppose in these functions that up and dest are loaded into registers %eax and
%edx, respectively. Fill in the following table with date type TYPE and sequences
of 1 -3 instructions to compute the expression and store the result at dest.

Try to use just registers %eax and %edx, using register %ecx when these do not
suffice.

-----------------------------------------------------------------------------------------
EXPR				TYPE			CODE
-----------------------------------------------------------------------------------------
up->t1.s			int		movl 4(%eax), %eax
     						movl %eax, (%edx)

up->t1.v			short		movw (%eax), %eax
						movw %eax, (%edx)

&up->t1.d			short		leal 2(%eax), %ecx
						movl %ecx, %edx

up->t2.a			int		movl 8(%eax), %ecx
						movl %ecx, %edx

up->t2.a[up->t1.s]		int		movl 4(%eax), %ecx
						sall $2, %ecx
						movl 8(%eax, %ecx, 4), %edx

*up->t2.p			char 		leal 16(%eax), %ecx
						movb (%ecx), %edx
						
							
-----------------------------------------------------------------------------------------
Everything involving t2 is wrong because I did not consider that this was a
union structure, so this would be true if it this involved nested structures.

the correction t2 is as follows:
-----------------------------------------------------------------------------------------

up->t2.a			int *		movl %eax, (%edx)

up->t2.a[up->t1.s]		int 		movl 4(%eax), %ecx
						movl (%eax, %ecx, 4), %eax
						movl %eax, (%edx)

*up->t2.p			char 		movl 8(%eax), %eax
						movb (%eax), al
						movb %al, (%edx)

-----------------------------------------------------------------------------------------

